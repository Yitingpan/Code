# -*- coding: utf-8 -*-

# table 2
IJN2 =[[0,    -2,    0.14632971213167E+00]
    , [0,    -1,    -0.84548187169114E+00]
    , [0,    0,     -0.37563603672040E+01]
    , [0,    1,     0.33855169168385E+01]
    , [0,    2,    -0.95791963387872E+00]
    , [0,    3,    0.15772038513228E+00]
    , [0,    4,    -0.16616417199501E-01]
    , [0,    5,    0.81214629983568E-03]
    , [1,    -9,    0.28319080123804E-03]
    , [1,    -7,    -0.60706301565874E-03]
    , [1,    -1,    -0.18990068218419E-01]
    , [1,    0,    -0.32529748770505E-01]
    , [1,    1,    -0.21841717175414E-01]
    , [1,    3,    -0.52838357969930E-04]
    , [2,    -3,    -0.47184321073267E-03]
    , [2,    0,    -0.30001780793026E-03]
    , [2,    1,    0.47661393906987E-04]
    , [2,    3,    -0.44141845330846E-05]
    , [2,    17,    -0.72694996297594E-15]
    , [3,    -4,    -0.31679644845054E-04]
    , [3,    0,    -0.28270797985312E-05]
    , [3,    6,    -0.85205128120103E-09]
    , [4,    -5,    -0.22425281908000E-05]
    , [4,    -2,    -0.65171222895601E-06]
    , [4,    10,    -0.14341729937924E-12]
    , [5,    -8,    -0.40516996860117E-06]
    , [8,    -11,    -0.12734301741641E-08]
    , [8,    -6,    -0.17424871230634E-09]
    , [21,    -29,    -0.68762131295531E-18]
    , [23,    -31,    0.14478307828521E-19]
    , [29,    -38,    0.26335781662795E-22]
    , [30,    -39,    -0.11947622640071E-22]
    , [31,    -40,    0.18228094581404E-23]
    , [32,    -41,    -0.93537087292458E-25]
     ]

# table 6
IJN6 =[[0, 0, -0.23872489924521E+03]
     ,[0, 1, 0.40421188637945E+03]
     ,[0, 2, 0.11349746881718E+03]
     ,[0, 6, -0.58457616048039E+01]
     ,[0, 22, -1.528548241314E-04]

     ,[0, 32, -0.10866707695377E-05]
     ,[1, 0, -0.13391744872602E+02]
     ,[1, 1,  0.43211039183559E+02]
     ,[1, 2,  -0.54010067170506E+02]
     ,[1, 3,  0.30535892203916E+02]

     ,[1, 4, -0.65964749423638E+01]
     ,[1,10,  0.93965400878363E-02]
     ,[1,32,  0.11573647505340E-06]
     ,[2,10, -0.25858641282073E-04]
     ,[2,32, -0.40644363084799E-08]
          
     ,[3,10, 0.66456186191635E-07]
     ,[3,32, 0.80670734103027E-10]
     ,[4,32,-0.93477771213947E-12]
     ,[5,32,  0.58265442020601E-14]
     ,[6,32,  -0.15020185953503E-16]
        ]  

# table 8
IJN8 = [ [ 0, 0, 0.17478268058307E+03]
        ,[ 0, 1, 0.34806930892873E+02]
        ,[ 0, 2, 0.65292584978455E+01]
        ,[ 0, 3, 0.33039981775489]
        ,[ 0,11, -0.19281382923196E-06]

        ,[ 0, 31, -0.24909197244573E-22]
        ,[ 1, 0,  -0.26107636489332]
        ,[ 1, 1,   0.22592965981526]
        ,[ 1, 2,  -0.64256463395226E-01]
        ,[ 1, 3,   0.78876289270526E-02]

        ,[ 1, 12,  0.35672110607366E-9]
        ,[ 1, 31,  0.17332496994895E-23]
        ,[ 2,  0,  0.56608900654837E-03]
        ,[ 2,  1,  -0.32635483139717E-03]
        ,[ 2,  2,   0.44778286690632E-04]

        ,[ 2, 9,   -0.51322156908507E-9]
        ,[ 2, 31,  -0.42522657042207E-25]
        ,[ 3, 10,   0.26400441360689E-12]
        ,[ 3, 32,   0.78124600459723E-28]
        ,[ 4, 32,   -0.30732199903668E-30]
        ]


PP = 16.53
TT = 1386
RR = 0.461526


# table 4 公式
def gama(p, t):
    pi = p / PP
    tao = TT / t
    gm = 0
    for i in range(0, 34):
        gm += IJN2[i][2] * (7.1 - pi)**IJN2[i][0] * (tao - 1.222)**IJN2[i][1]
    return gm


def gamapai(p, t):
    pi = p / PP
    tao = TT / t
    gmp = 0
    for i in range(0, 34):
        gmp -= IJN2[i][2] * IJN2[i][0] * (7.1 - pi)**(IJN2[i][0] - 1) * (tao - 1.222)**IJN2[i][1]
    return gmp


def gamapaipai(p, t):
    pi = p / PP
    tao = TT / t
    gmpp = 0
    for i in range(0, 34):
        gmpp += IJN2[i][2] * IJN2[i][0] * (IJN2[i][0] - 1) * \
            (7.1 - pi)**(IJN2[i][0] - 2) * (tao - 1.222)**IJN2[i][1]
    return gmpp


def gamatao(p, t):
    pi = p / PP
    tao = TT / t
    gmt = 0
    for i in range(0, 34):
        gmt += IJN2[i][2] * (7.1 - pi)**IJN2[i][0] * IJN2[i][1] * (tao - 1.222)**(IJN2[i][1] - 1)
    return gmt


def gamataotao(p, t):
    pi = p / PP
    tao = TT / t
    gmtt = 0
    for i in range(0, 34):
        gmtt += IJN2[i][2] * (7.1 - pi)**IJN2[i][0] * IJN2[i][1] * \
            (IJN2[i][1] - 1) * (tao - 1.222)**(IJN2[i][1] - 2)
    return gmtt


def gamapaitao(p, t):
    pi = p / PP
    tao = TT / t
    gmpt = 0
    for i in range(0, 34):
        gmpt -= IJN2[i][2] * IJN2[i][0] * (7.1 - pi)**(IJN2[i][0] - 1) * \
            IJN2[i][1] * (tao - 1.222)**(IJN2[i][1] - 1)
    return gmpt
# table 4 完成


# table 3 公式
def Volume(p, t):
    pi = p / PP
    vol = pi * gamapai(p, t) * RR * t / (p * 1000)
    return vol


def InternalEnergy(p, t):
    pi = p / PP
    tao = TT / t
    eng = (tao * gamatao(p, t) - pi * gamapai(p, t)) * RR * t
    return eng


def Entropy(p, t):
    tao = TT / t
    ent = (tao * gamatao(p, t) - gama(p, t)) * RR
    return ent


def Enthalpy(p, t):
    tao = TT / t
    ent = tao * gamatao(p, t) * RR * t
    return ent


def IHCapacity(p, t):
    tao = TT / t
    cap = 0 - tao**2 * gamataotao(p, t) * RR
    return cap


def Sound(p, t):
    tao = TT / t
    s1 = gamapai(p, t)**2
    s2 = gamapai(p, t) - tao * gamapaitao(p, t)
    s3 = s2**2
    s4 = tao**2 * gamataotao(p, t)
    s5 = s3 / s4
    sou = (s1 * RR * t * 1000 / (s5 - gamapaipai(p, t)))**0.5
    return sou
# table 3 完成


# table 6 ��ʽ
def Backword11T(p, h):
    jieguo = 0
    Tc = 1
    H = h / 2500
    pi = p / 1
    for i in range(0, 19):
        jieguo += IJN6[i][2] * (pi)**IJN6[i][0] * (H+1)**IJN6[i][1]
    return jieguo*Tc


# table 8 ��ʽ
def Backward13T(p, s):
    jieguo = 0
    Tc = 1
    pi = p / 1
    eta = s / 1
    for i in range(0, 19):
        jieguo += IJN8[i][2] * (pi)**IJN8[i][0] * (eta + 2)**IJN8[i][1]
    return jieguo*Tc
